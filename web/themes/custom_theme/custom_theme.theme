<?php
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Utility\TableSort;
use Drupal\Core\Render\Element;
use Drupal\Core\Datetime\DatePreprocess;
use Drupal\Core\Theme\ThemePreprocess;
use Drupal\Core\Config\Config;
use Drupal\Core\Config\StorageException;
use Drupal\Core\Template\AttributeHelper;
use Drupal\Core\Theme\ThemeCommonElements;
use Drupal\Core\Theme\ThemeSettings;
use Drupal\Core\Installer\InstallerKernel;
use Drupal\file\Entity\File;

function custom_theme_preprocess_views_view_fields(&$variables): void {
  $view = $variables['view'];
  $viewId = $view->id();
  $displayId = $view->current_display;
  // Loop through the fields for this view.
  $previous_inline = FALSE;
  // Ensure it's at least an empty array.
  $variables['fields'] = [];
  /** @var \Drupal\views\ResultRow $row */
  $row = $variables['row'];
  foreach ($view->field as $id => $field) {
    // Render this even if set to exclude so it can be used elsewhere.
    $field_output = $view->style_plugin->getField($row->index, $id);
    $empty = $field->isValueEmpty($field_output, $field->options['empty_zero']);
    if (empty($field->options['exclude']) && (!$empty || (empty($field->options['hide_empty']) && empty($variables['options']['hide_empty'])))) {
      $object = new stdClass();
      $object->handler = $view->field[$id];
      $object->inline = !empty($variables['options']['inline'][$id]);
      // Set up default value of the flag that indicates whether to display a
      // colon after the label.
      $object->has_label_colon = FALSE;

      $object->element_type = $object->handler->elementType(TRUE, !$variables['options']['default_field_elements'], $object->inline);
      if ($object->element_type) {
        $attributes = [];
        if ($object->handler->options['element_default_classes']) {
          $attributes['class'][] = 'field-content';
        }

        if ($classes = $object->handler->elementClasses($row->index)) {
          $attributes['class'][] = $classes;
        }
        $object->element_attributes = new Attribute($attributes);
      }

      $object->content = $field_output;
      if (isset($view->field[$id]->field_alias) && isset($row->{$view->field[$id]->field_alias})) {
        $object->raw = $row->{$view->field[$id]->field_alias};
      }
      else {
        // Make sure it exists to reduce NOTICE.
        $object->raw = NULL;
      }

      if (!empty($variables['options']['separator']) && $previous_inline && $object->inline && $object->content) {
        $object->separator = [
          '#markup' => $variables['options']['separator'],
        ];
      }

      $object->class = Html::cleanCssIdentifier($id);

      $previous_inline = $object->inline;
      // Set up field wrapper element.
      $object->wrapper_element = $object->handler->elementWrapperType(TRUE, TRUE);
      if ($object->wrapper_element === '' && $variables['options']['default_field_elements']) {
        $object->wrapper_element = $object->inline ? 'span' : 'div';
      }

      // Set up field wrapper attributes if field wrapper was set.
      if ($object->wrapper_element) {
        $attributes = [];
        if ($object->handler->options['element_default_classes']) {
          $attributes['class'][] = 'views-field';
          $attributes['class'][] = 'views-field-' . $object->class;
        }
        if ($classes = elementWrapperClasses($object->handler, $row->index)) {
          $attributes['class'][] = $classes;
        }
        // if($viewId === "tin_tuc_phu" && $displayId === "block_1") {
        //   dump($id);
        // }
        $object->wrapper_attributes = new Attribute($attributes);
      }

      // Set up field label
      $object->label = $view->field[$id]->label();

      // Set up field label wrapper and its attributes.
      if ($object->label) {
        // Add a colon in a label suffix.
        if ($object->handler->options['element_label_colon']) {
          $object->label_suffix = ': ';
          $object->has_label_colon = TRUE;
        }

        // Set up label HTML element.
        $object->label_element = $object->handler->elementLabelType(TRUE, !$variables['options']['default_field_elements']);

        // Set up label attributes.
        if ($object->label_element) {
          $attributes = [];
          if ($object->handler->options['element_default_classes']) {
            $attributes['class'][] = 'views-label';
            $attributes['class'][] = 'views-label-' . $object->class;
          }

          // Set up field label.
          $element_label_class = $object->handler->elementLabelClasses($row->index);
          if ($element_label_class) {
            $attributes['class'][] = $element_label_class;
          }
          $object->label_attributes = new Attribute($attributes);
        }
      }

      $variables['fields'][$id] = $object;
      // dump($variables['fields']['field_mo_ta']->content);
    }
  }

}


function custom_theme_preprocess_views_view_unformatted(&$variables): void {
  $view = $variables['view'];
  $viewId = $view->id();
  $displayId = $view->current_display;
  $rows = $variables['rows'];
  $style = $view->style_plugin;
  $options = $style->options;
  $variables['default_row_class'] = !empty($options['default_row_class']);
  foreach ($rows as $id => $row) {
    $variables['rows'][$id] = [];
    // if($viewId === "tin_tuc_phu" && $displayId === "block_2") {
    // }
   if (!is_array($row)) {
    $variables['rows'][$id] = [
      'content' => $row,
      'attributes' => ['class' => []],
    ];
  }
  else {
    $variables['rows'][$id]['content'] = $row['content'] ?? $row;
    $variables['rows'][$id]['attributes'] = new Attribute();
  }
    $row_class = $options['row_class'];
    $variables['rows'][$id]['attributes']->addClass($row_class);
  }
}


function elementWrapperClasses($handler, $row_index = NULL) {
    $classes = $handler->tokenizeValue($handler->options['element_wrapper_class'], $row_index);
    $classes = explode(' ', $classes);
    // foreach ($classes as &$class) {
    //     //$class = Html::cleanCssIdentifier($class);
    // }
    return implode(' ', $classes);

}

function custom_theme_preprocess_item_list(&$variables): void {
  if($variables['context']['settings']['instance_id'] == 'bao_chi-block-block_1'){
    foreach ($variables['items'] as &$item) {
        $item['attributes']['class'][] = 'my-li-item';
      }
  }
}
///view
function custom_theme_preprocess_views_view(&$variables) {
  if ($variables['view']->id() === 'tin_tuc' && $variables['view']->current_display === 'block_1') {
    // $variables['tin_tuc_phu'] = views_embed_view('tin_tuc_phu', 'block_1');
     $file_url_generator = \Drupal::service('file_url_generator');
     $sub_view = \Drupal\views\Views::getView('tin_tuc_phu');
      if ($sub_view) {
      $sub_view->setDisplay('block_1');
      $sub_view->setItemsPerPage(4);
      $sub_view->preExecute();
      $sub_view->execute();
      // Lấy dữ liệu rows
      $rows = [];
      foreach ($sub_view->result as $row) {
        $fields = $sub_view->field;
        $title = $fields['title']->advancedRender($row);
        // $image = $fields['field_anh']->advancedRender($row);
        $depc = $fields['field_mo_ta']->advancedRender($row);
        $image_url = '';
        if (!empty($row->_entity->get('field_anh')->entity)) {
          $image_uri = $row->_entity->get('field_anh')->entity->getFileUri();
          $image_url = $file_url_generator->generateAbsoluteString($image_uri);
        }
        $rows[] = [
          'title' => $title,
          'anh' => $image_url,
          'mo_ta' => $depc,
        ];
      }
      
      $variables['tin_tuc_phu'] = $rows;
    }
  }
  if($variables['view']->id() === 'page_gioi_thieu' && ($variables['view']->current_display === 'page_1' || $variables['view']->current_display === 'page_2' )){
    $rows = [];
    foreach ($variables['view']->result as $row) {
      $entity = $row->_entity;
      $rows[] = [
        'id' => $entity->id(),
        'tieu_de' => $entity->label(),
        'noi_dung' => $entity->get('body')->value,
      ];
    }
    $variables['list_gioi_thieu'] = $rows;
  }
}